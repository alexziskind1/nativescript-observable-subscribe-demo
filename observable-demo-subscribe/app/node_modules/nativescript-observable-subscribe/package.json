{
  "name": "nativescript-observable-subscribe",
  "version": "0.1.5",
  "description": "A NativeScript module to add subscribe functionality to observables",
  "main": "observablesubscribe.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alexziskind1/nativescript-observable-subscribe.git"
  },
  "keywords": [
    "nativescript"
  ],
  "author": {
    "name": "Alex Ziskind",
    "email": "alex@nuvious.com",
    "url": "http://www.nuvious.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/alexziskind1/nativescript-observable-subscribe/issues"
  },
  "homepage": "https://github.com/alexziskind1/nativescript-observable-subscribe",
  "readme": "# nativescript-observable-subscribe\n\nNativeScript module that adds subscribe support to observables. Listening for observable changes can always be done using standard addEventListener technique that can be found in the NativeScript docs, but this is a much more convenient subscription method that keeps your code neat by isolating handlers for individual properties.\nAs NativeScript is constantly evolving, a subscribe solution might be implemented in the core project as a tns module making this module obsolete; so one should keep an eye out for that.\n\n## Installation\n\nRun `npm install nativescript-observable-subscribe --save` from your project's `app` directory:\n\n```\n.\n├── app  <------------------------------ run npm install from here\n│   ├── app.css\n│   ├── app.js\n│   ├── bootstrap.js\n│   ├── main-page.js\n│   ├── main-page.xml\n│   ├── node_modules\n│   │   └── nativescript-observable-subscribe <-- The install will place the module's code here\n│   │       └── ...\n│   └── package.json <----------------- The install will register “nativescript-observable-subscribe” as a dependency here\n│   └── tns_modules\n│       └── ...\n└── platforms\n    ├── android\n    └── ios\n```\n\n\nIf npm doesn't end up working for you, you can just copy and paste this repo's observablesubscribe.js file into your app and reference it directly.\n\n\n## Usage\n\nTo use the  Observable Subscribe Module you must first `require()` it from your project's `node_modules` directory:\n\n```\nrequire( \"./node_modules/nativescript-observable-subscribe/observablesubscribe\" );\n```\n\nOnce you have required the module in your code, it will execute and add the subscribe/unsubscribe functions to observable. You will be able to start using it to get notified of property changes like this:\n\n\n```\n// viewmodel.js\n\t...\n    var mainViewModel = new HelloWorldModel();\n\tvar counterPropName = 'counter';\n\n\tmainViewModel.subscribe(counterPropName, function(args){\n\t\tif (this.get(counterPropName) <= 0) {\n\t\t\tthis.set(messagePropName, \"Hoorraaay! You unlocked the NativeScript clicker achievement!\");\n\t\t}\n\t\telse {\n\t\t\tthis.set(messagePropName, this.get(counterPropName) + \" taps left\");\n\t\t} \n\t}, mainViewModel);\n\n\texports.mainViewModel = mainViewModel;\n```\n\nIf you want to unsubscribe a property from notifications, you can use the unsubscribe function like this:\n\n\n```\n// viewmodel.js\n\t...\n\tmainViewModel.unsubscribe(counterPropName, callback);\n\t...\n```\n\n\n*Thanks to TJ VanToll for the directory structure graphic above and the template for this doc",
  "readmeFilename": "README.md",
  "_id": "nativescript-observable-subscribe@0.1.5",
  "_shasum": "57886574b3b1393412ca7ef8e2cd8db312bcbb2f",
  "_from": "nativescript-observable-subscribe@"
}
